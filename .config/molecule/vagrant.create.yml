---
# yYmllint disable rule:line-length
- hosts: localhost
  name: Update platforms
  tasks:
    - name: Filtering platforms list using the group defined in the MOLECULE_GROUP environment variable
      set_fact:
        # eslint-disable-next-line max-len
        molecule_yml: "{{ molecule_yml | combine({'platforms': (molecule_yml.platforms | selectattr('groups', 'contains', lookup('env', 'MOLECULE_GROUP')))}) }}"
      when: ansible_env.MOLECULE_GROUP is defined

- connection: local
  gather_facts: false
  hosts: localhost
  name: Create
  no_log: '{{ molecule_no_log }}'
  tasks:
    - loop_control:
        label: '{{ item.name }}'
      name: Create molecule instance(s)
      no_log: false

      register: server
      vagrant:
        config_options: '{{ item.config_options | default(omit) }}'
        instance_interfaces: '{{ item.interfaces | default(omit) }}'
        instance_name: '{{ item.name }}'
        instance_raw_config_args: '{{ item.instance_raw_config_args | default(omit) }}'
        platform_box: '{{ item.box | default("generic/alpine310") }}'
        platform_box_url: '{{ item.box_url | default(omit) }}'
        platform_box_version: '{{ item.box_version | default(omit) }}'
        provider_cpus: '{{ item.cpus | default(omit) }}'
        provider_memory: '{{ item.memory | default(omit) }}'
        provider_name: '{{ molecule_yml.driver.provider.name | default(omit, true) }}'
        provider_options: '{{ item.provider_options | default(omit) }}'
        provider_override_args: '{{ item.provider_override_args | default(omit) }}'
        provider_raw_config_args: '{{ item.provider_raw_config_args | default(omit) }}'
        provision: '{{ item.provision | default(omit) }}'
        state: up
      with_items: '{{ molecule_yml.platforms }}'
    - block:
        - name: Populate instance config dict
          register: instance_config_dict

          set_fact:
            instance_conf_dict:
              address: '{{ item.HostName }}'
              identity_file: '{{ item.IdentityFile }}'

              instance: '{{ item.Host }}'
              port: '{{ item.Port }}'
              user: '{{ item.User }}'
          with_items: '{{ server.results }}'
        - name: Convert instance config dict to a list
          set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

        - copy:
            content: '{{ instance_conf | to_json | from_json | to_yaml }}'
            dest: '{{ molecule_instance_config }}'
            mode: 0600
          name: Dump instance config
      name: Run tasks if there were changes while creating the molecule instance(s)
      when: server.changed | bool
